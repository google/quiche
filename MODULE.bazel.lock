{
  "lockFileVersion": 3,
  "moduleFileHash": "b5a1ae408cbf784daa3270a7a17938e843d2ef5477995cfb271fc74f2a5f9ff9",
  "flags": {
    "cmdRegistries": [
      "https://bcr.bazel.build/"
    ],
    "cmdModuleOverrides": {},
    "allowedYankedVersions": [],
    "envVarAllowedYankedVersions": "",
    "ignoreDevDependency": false,
    "directDependenciesMode": "WARNING",
    "compatibilityMode": "ERROR"
  },
  "localOverrideHashes": {
    "bazel_tools": "922ea6752dc9105de5af957f7a99a6933c0a6a712d23df6aad16a9c399f7e787"
  },
  "moduleDepGraph": {
    "<root>": {
      "name": "quiche",
      "version": "",
      "key": "<root>",
      "repoName": "quiche",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@androidndk//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "//:MODULE.bazel",
          "extensionName": "_repo_rules",
          "usingModule": "<root>",
          "location": {
            "file": "@@//:MODULE.bazel",
            "line": 0,
            "column": 0
          },
          "imports": {
            "com_google_quic_trace": "com_google_quic_trace",
            "com_google_googleurl": "com_google_googleurl"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
              "attributeValues": {
                "sha256": "ba01a041ae37b423fb8d555c53e545dcc914ad1a9a03832f266c0107d4433b08",
                "strip_prefix": "quic-trace-ed3deb8a056b260c59f2fd42af6dfa3db48a8cad",
                "urls": [
                  "https://github.com/google/quic-trace/archive/ed3deb8a056b260c59f2fd42af6dfa3db48a8cad.tar.gz"
                ],
                "name": "com_google_quic_trace"
              },
              "devDependency": false,
              "location": {
                "file": "@@//:MODULE.bazel",
                "line": 37,
                "column": 13
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
              "attributeValues": {
                "sha256": "1d2c507cc31e109ecb41ba1fe766f5ff0f5974c3ba8d0919b3d22668f7e89305",
                "urls": [
                  "https://storage.googleapis.com/quiche-envoy-integration/googleurl-5573f9aa120f3fbd378ca1b2565bbf7d223cd542.tar.gz"
                ],
                "name": "com_google_googleurl"
              },
              "devDependency": false,
              "location": {
                "file": "@@//:MODULE.bazel",
                "line": 44,
                "column": 13
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_android_ndk//:extension.bzl",
          "extensionName": "android_ndk_repository_extension",
          "usingModule": "<root>",
          "location": {
            "file": "@@//:MODULE.bazel",
            "line": 51,
            "column": 49
          },
          "imports": {
            "androidndk": "androidndk"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_cc": "rules_cc@0.1.1",
        "rules_android_ndk": "rules_android_ndk@0.1.2",
        "platforms": "platforms@0.0.11",
        "com_google_absl": "abseil-cpp@20250512.0",
        "com_google_protobuf": "protobuf@31.1",
        "boringssl": "boringssl@0.20250415.0",
        "com_google_googletest": "googletest@1.17.0",
        "re2": "re2@2024-07-02.bcr.1",
        "zlib": "zlib@1.3.1.bcr.5",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "bazel_skylib@1.7.1": {
      "name": "bazel_skylib",
      "version": "1.7.1",
      "key": "bazel_skylib@1.7.1",
      "repoName": "bazel_skylib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains/unittest:cmd_toolchain",
        "//toolchains/unittest:bash_toolchain"
      ],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.11",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_skylib~1.7.1",
          "urls": [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz"
          ],
          "integrity": "sha256-vCg8381SalLDIBJ5zaS8KYZS76iYsQtNsIN9xRZSdW8=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_cc@0.1.1": {
      "name": "rules_cc",
      "version": "0.1.1",
      "key": "rules_cc@0.1.1",
      "repoName": "rules_cc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_cc//cc:extensions.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "rules_cc@0.1.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_cc/0.1.1/MODULE.bazel",
            "line": 12,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "com_google_protobuf": "protobuf@31.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_cc~0.1.1",
          "urls": [
            "https://github.com/bazelbuild/rules_cc/releases/download/0.1.1/rules_cc-0.1.1.tar.gz"
          ],
          "integrity": "sha256-cS13hosxUt1hjE1k+q3e/MWWX5D13m5t0dXdzQvoLUI=",
          "strip_prefix": "rules_cc-0.1.1",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_cc/0.1.1/patches/module_dot_bazel_version.patch": "sha256-2WyM/DEOM/Dj9MQU0Jl79eQ0Ju3QHGsgIuLO1OIwdt4="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_android_ndk@0.1.2": {
      "name": "rules_android_ndk",
      "version": "0.1.2",
      "key": "rules_android_ndk@0.1.2",
      "repoName": "rules_android_ndk",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.11",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_android_ndk~0.1.2",
          "urls": [
            "https://github.com/bazelbuild/rules_android_ndk/releases/download/v0.1.2/rules_android_ndk-v0.1.2.tar.gz"
          ],
          "integrity": "sha256-Za7f8M1yi+45T2+45lujnExe+xGym3ZjVpItSnTGI/U=",
          "strip_prefix": "rules_android_ndk-0.1.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_android_ndk/0.1.2/patches/module_dot_bazel_version.patch": "sha256-IDEFQWKtCrA0XUZBoJ6eQJ8nAjxdF7CjKOr+LcrgdC0="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "platforms@0.0.11": {
      "name": "platforms",
      "version": "0.0.11",
      "key": "platforms@0.0.11",
      "repoName": "platforms",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@platforms//host:extension.bzl",
          "extensionName": "host_platform",
          "usingModule": "platforms@0.0.11",
          "location": {
            "file": "https://bcr.bazel.build/modules/platforms/0.0.11/MODULE.bazel",
            "line": 9,
            "column": 30
          },
          "imports": {
            "host_platform": "host_platform"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "platforms",
          "urls": [
            "https://github.com/bazelbuild/platforms/releases/download/0.0.11/platforms-0.0.11.tar.gz"
          ],
          "integrity": "sha256-KXQuhydYCbXlmNwvBNhpYMx6VbMGfZciHJq7yZJr/w8=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "abseil-cpp@20250512.0": {
      "name": "abseil-cpp",
      "version": "20250512.0",
      "key": "abseil-cpp@20250512.0",
      "repoName": "abseil-cpp",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_cc": "rules_cc@0.1.1",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "googletest": "googletest@1.17.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "abseil-cpp~20250512.0",
          "urls": [
            "https://github.com/abseil/abseil-cpp/releases/download/20250512.0/abseil-cpp-20250512.0.tar.gz"
          ],
          "integrity": "sha256-cmLap8FxFAYkjBD0ECbWheiCI7ySgX0W+5PBmttX9mk=",
          "strip_prefix": "abseil-cpp-20250512.0",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "protobuf@31.1": {
      "name": "protobuf",
      "version": "31.1",
      "key": "protobuf@31.1",
      "repoName": "com_google_protobuf",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//bazel/private/toolchains:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_python//python/extensions:python.bzl",
          "extensionName": "python",
          "usingModule": "protobuf@31.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
            "line": 120,
            "column": 23
          },
          "imports": {
            "system_python": "python_3_12"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "toolchain",
              "attributeValues": {
                "ignore_root_user_error": true,
                "is_default": false,
                "python_version": "3.9"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
                "line": 123,
                "column": 21
              }
            },
            {
              "tagName": "toolchain",
              "attributeValues": {
                "ignore_root_user_error": true,
                "is_default": false,
                "python_version": "3.10"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
                "line": 123,
                "column": 21
              }
            },
            {
              "tagName": "toolchain",
              "attributeValues": {
                "ignore_root_user_error": true,
                "is_default": false,
                "python_version": "3.11"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
                "line": 123,
                "column": 21
              }
            },
            {
              "tagName": "toolchain",
              "attributeValues": {
                "ignore_root_user_error": true,
                "is_default": true,
                "python_version": "3.12"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
                "line": 123,
                "column": 21
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_jvm_external//:extensions.bzl",
          "extensionName": "maven",
          "usingModule": "protobuf@31.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
            "line": 179,
            "column": 31
          },
          "imports": {
            "protobuf_maven": "protobuf_maven"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "install",
              "attributeValues": {
                "name": "protobuf_maven",
                "artifacts": [
                  "com.google.code.findbugs:jsr305:3.0.2",
                  "com.google.code.gson:gson:2.8.9",
                  "com.google.errorprone:error_prone_annotations:2.5.1",
                  "com.google.j2objc:j2objc-annotations:2.8",
                  "com.google.guava:guava:32.0.1-jre"
                ],
                "lock_file": "//:maven_install.json",
                "repositories": [
                  "https://repo1.maven.org/maven2",
                  "https://repo.maven.apache.org/maven2"
                ]
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
                "line": 180,
                "column": 23
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_cc//cc:extensions.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "protobuf@31.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/protobuf/31.1/MODULE.bazel",
            "line": 227,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "build_bazel_rules_apple": "rules_apple@3.16.0",
        "build_bazel_apple_support": "apple_support@1.15.1",
        "abseil-cpp": "abseil-cpp@20250512.0",
        "rules_cc": "rules_cc@0.1.1",
        "zlib": "zlib@1.3.1.bcr.5",
        "proto_bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "jsoncpp": "jsoncpp@1.9.6",
        "rules_java": "rules_java@8.6.1",
        "rules_jvm_external": "rules_jvm_external@6.7",
        "rules_kotlin": "rules_kotlin@1.9.6",
        "rules_license": "rules_license@1.0.0",
        "rules_pkg": "rules_pkg@1.0.1",
        "rules_python": "rules_python@1.0.0",
        "rules_shell": "rules_shell@0.3.0",
        "platforms": "platforms@0.0.11",
        "re2": "re2@2024-07-02.bcr.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "protobuf~31.1",
          "urls": [
            "https://github.com/protocolbuffers/protobuf/releases/download/v31.1/protobuf-31.1.zip"
          ],
          "integrity": "sha256-VU6EfkbHBb/ET7LQrlv3jzQ5X8v9hrp0czi1cO7yZ3E=",
          "strip_prefix": "protobuf-31.1",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "boringssl@0.20250415.0": {
      "name": "boringssl",
      "version": "0.20250415.0",
      "key": "boringssl@0.20250415.0",
      "repoName": "boringssl",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "googletest": "googletest@1.17.0",
        "platforms": "platforms@0.0.11",
        "rules_cc": "rules_cc@0.1.1",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "boringssl~0.20250415.0",
          "urls": [
            "https://github.com/google/boringssl/releases/download/0.20250415.0/boringssl-0.20250415.0.tar.gz"
          ],
          "integrity": "sha256-stZMTVLFBdYLD7hoM1aNxHYkRZENendX/5sXLlVWywE=",
          "strip_prefix": "boringssl-0.20250415.0/",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "googletest@1.17.0": {
      "name": "googletest",
      "version": "1.17.0",
      "key": "googletest@1.17.0",
      "repoName": "googletest",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@googletest//:fake_fuchsia_sdk.bzl",
          "extensionName": "fuchsia_sdk",
          "usingModule": "googletest@1.17.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/googletest/1.17.0/MODULE.bazel",
            "line": 74,
            "column": 28
          },
          "imports": {
            "fuchsia_sdk": "fuchsia_sdk"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "create_fake",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/googletest/1.17.0/MODULE.bazel",
                "line": 75,
                "column": 24
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "abseil-cpp": "abseil-cpp@20250512.0",
        "platforms": "platforms@0.0.11",
        "re2": "re2@2024-07-02.bcr.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "googletest~1.17.0",
          "urls": [
            "https://github.com/google/googletest/releases/download/v1.17.0/googletest-1.17.0.tar.gz"
          ],
          "integrity": "sha256-Zfq3AdmCnTjLd8FKzcQx0hCL/b+JeeQOuK5Wft8Qsnw=",
          "strip_prefix": "googletest-1.17.0",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "re2@2024-07-02.bcr.1": {
      "name": "re2",
      "version": "2024-07-02.bcr.1",
      "key": "re2@2024-07-02.bcr.1",
      "repoName": "re2",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.11",
        "apple_support": "apple_support@1.15.1",
        "rules_cc": "rules_cc@0.1.1",
        "abseil-cpp": "abseil-cpp@20250512.0",
        "rules_python": "rules_python@1.0.0",
        "pybind11_bazel": "pybind11_bazel@2.12.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "re2~2024-07-02.bcr.1",
          "urls": [
            "https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.zip"
          ],
          "integrity": "sha256-qDX+Vfvc2OgPOFhKsi0IQGYsZ/L+s2vWeUAtqWQdxx4=",
          "strip_prefix": "re2-2024-07-02",
          "remote_patches": {
            "https://bcr.bazel.build/modules/re2/2024-07-02.bcr.1/patches/module_dot_bazel.patch": "sha256-qacD5PFevrt/ZkvLjKCocyCICqh/pVrb5J1Ho+tTsoc="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "zlib@1.3.1.bcr.5": {
      "name": "zlib",
      "version": "1.3.1.bcr.5",
      "key": "zlib@1.3.1.bcr.5",
      "repoName": "zlib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.11",
        "rules_cc": "rules_cc@0.1.1",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "zlib~1.3.1.bcr.5",
          "urls": [
            "https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz"
          ],
          "integrity": "sha256-mpOyt9/ax3zrpaVYpYDnRmfdb+3kWFuR7vtg8Dty3yM=",
          "strip_prefix": "zlib-1.3.1",
          "remote_patches": {
            "https://bcr.bazel.build/modules/zlib/1.3.1.bcr.5/patches/add_build_file.patch": "sha256-SdbiiqOKN9dcerx8E+mFC2Pd/Q2KuL67/3+50WxCJLc=",
            "https://bcr.bazel.build/modules/zlib/1.3.1.bcr.5/patches/module_dot_bazel.patch": "sha256-ln6iWXu370RclA0exBzU2YboB6sDIn76lsAzkNXWuvk="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "bazel_tools@_": {
      "name": "bazel_tools",
      "version": "",
      "key": "bazel_tools@_",
      "repoName": "bazel_tools",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all",
        "@local_config_sh//:local_sh_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 17,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/osx:xcode_configure.bzl",
          "extensionName": "xcode_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 21,
            "column": 32
          },
          "imports": {
            "local_config_xcode": "local_config_xcode"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 24,
            "column": 32
          },
          "imports": {
            "local_jdk": "local_jdk",
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/sh:sh_configure.bzl",
          "extensionName": "sh_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 35,
            "column": 39
          },
          "imports": {
            "local_config_sh": "local_config_sh"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/test:extensions.bzl",
          "extensionName": "remote_coverage_tools_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 39,
            "column": 48
          },
          "imports": {
            "remote_coverage_tools": "remote_coverage_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
          "extensionName": "remote_android_tools_extensions",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 42,
            "column": 42
          },
          "imports": {
            "android_gmaven_r8": "android_gmaven_r8",
            "android_tools": "android_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_cc": "rules_cc@0.1.1",
        "rules_java": "rules_java@8.6.1",
        "rules_license": "rules_license@1.0.0",
        "rules_proto": "rules_proto@7.0.2",
        "rules_python": "rules_python@1.0.0",
        "platforms": "platforms@0.0.11",
        "com_google_protobuf": "protobuf@31.1",
        "zlib": "zlib@1.3.1.bcr.5",
        "build_bazel_apple_support": "apple_support@1.15.1",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "local_config_platform@_": {
      "name": "local_config_platform",
      "version": "",
      "key": "local_config_platform@_",
      "repoName": "local_config_platform",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.11",
        "bazel_tools": "bazel_tools@_"
      }
    },
    "rules_license@1.0.0": {
      "name": "rules_license",
      "version": "1.0.0",
      "key": "rules_license@1.0.0",
      "repoName": "rules_license",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_license~1.0.0",
          "urls": [
            "https://github.com/bazelbuild/rules_license/releases/download/1.0.0/rules_license-1.0.0.tar.gz"
          ],
          "integrity": "sha256-JtQCH2iY4juC75UweDid1JrCtWGKxWSt5O+HzO0Uezg=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "bazel_features@1.23.0": {
      "name": "bazel_features",
      "version": "1.23.0",
      "key": "bazel_features@1.23.0",
      "repoName": "bazel_features",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_features//private:extensions.bzl",
          "extensionName": "version_extension",
          "usingModule": "bazel_features@1.23.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/bazel_features/1.23.0/MODULE.bazel",
            "line": 15,
            "column": 24
          },
          "imports": {
            "bazel_features_globals": "bazel_features_globals",
            "bazel_features_version": "bazel_features_version"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_features~1.23.0",
          "urls": [
            "https://github.com/bazel-contrib/bazel_features/releases/download/v1.23.0/bazel_features-v1.23.0.tar.gz"
          ],
          "integrity": "sha256-ixybdVhJgAD1reu8WEt78VtrK/GBRIpm9rL8W0yEIxw=",
          "strip_prefix": "bazel_features-1.23.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/bazel_features/1.23.0/patches/module_dot_bazel_version.patch": "sha256-1kHZNXHlaenSup1dCo6TYiVXZHZvbBDW75BSKGv7rKQ="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_apple@3.16.0": {
      "name": "rules_apple",
      "version": "3.16.0",
      "key": "rules_apple@3.16.0",
      "repoName": "rules_apple",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_apple//apple:extensions.bzl",
          "extensionName": "non_module_deps",
          "usingModule": "rules_apple@3.16.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_apple/3.16.0/MODULE.bazel",
            "line": 31,
            "column": 32
          },
          "imports": {
            "xctestrunner": "xctestrunner"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_apple//apple:apple.bzl",
          "extensionName": "provisioning_profile_repository_extension",
          "usingModule": "rules_apple@3.16.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_apple/3.16.0/MODULE.bazel",
            "line": 37,
            "column": 48
          },
          "imports": {
            "local_provisioning_profiles": "local_provisioning_profiles"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
          "extensionName": "apple_cc_configure_extension",
          "usingModule": "rules_apple@3.16.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_apple/3.16.0/MODULE.bazel",
            "line": 40,
            "column": 35
          },
          "imports": {
            "local_config_apple_cc": "local_config_apple_cc"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "build_bazel_apple_support": "apple_support@1.15.1",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "rules_cc": "rules_cc@0.1.1",
        "build_bazel_rules_swift": "rules_swift@2.1.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_apple~3.16.0",
          "urls": [
            "https://github.com/bazelbuild/rules_apple/releases/download/3.16.0/rules_apple.3.16.0.tar.gz"
          ],
          "integrity": "sha256-hv+cOix7wwj+8zm81bOBmqc1IVAziGzCgetj8QzReXY=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_apple/3.16.0/patches/module_dot_bazel_version.patch": "sha256-tc1zjSKWZcwJgw84Baye8gdG6De+/REqSj9Ra17Xcoo="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "apple_support@1.15.1": {
      "name": "apple_support",
      "version": "1.15.1",
      "key": "apple_support@1.15.1",
      "repoName": "build_bazel_apple_support",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_apple_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
          "extensionName": "apple_cc_configure_extension",
          "usingModule": "apple_support@1.15.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/apple_support/1.15.1/MODULE.bazel",
            "line": 19,
            "column": 35
          },
          "imports": {
            "local_config_apple_cc": "local_config_apple_cc",
            "local_config_apple_cc_toolchains": "local_config_apple_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "apple_support~1.15.1",
          "urls": [
            "https://github.com/bazelbuild/apple_support/releases/download/1.15.1/apple_support.1.15.1.tar.gz"
          ],
          "integrity": "sha256-xLsrc2fEhDgjAK7nW+WYuS+EeJb7MbvSLzojRq32aoA=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/apple_support/1.15.1/patches/module_dot_bazel_version.patch": "sha256-FvMGp1f0FT1IT38LFbWGUqe5fukTvEyug2Puhimca74="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "jsoncpp@1.9.6": {
      "name": "jsoncpp",
      "version": "1.9.6",
      "key": "jsoncpp@1.9.6",
      "repoName": "jsoncpp",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "jsoncpp~1.9.6",
          "urls": [
            "https://github.com/open-source-parsers/jsoncpp/archive/refs/tags/1.9.6.tar.gz"
          ],
          "integrity": "sha256-+Ttt1855axPQLBCLyfeYEiRaguV3WBxMmqvlcHXJDqI=",
          "strip_prefix": "jsoncpp-1.9.6",
          "remote_patches": {
            "https://bcr.bazel.build/modules/jsoncpp/1.9.6/patches/module_dot_bazel.patch": "sha256-OE/Wj/2VLvClX5AaWX2jI/lf07RgyoCT4/aNHnkY/Yg="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_java@8.6.1": {
      "name": "rules_java",
      "version": "8.6.1",
      "key": "rules_java@8.6.1",
      "repoName": "rules_java",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains:all",
        "@local_jdk//:runtime_toolchain_definition",
        "@local_jdk//:bootstrap_runtime_toolchain_definition",
        "@remote_jdk8_linux_toolchain_config_repo//:all",
        "@remote_jdk8_linux_aarch64_toolchain_config_repo//:all",
        "@remote_jdk8_linux_s390x_toolchain_config_repo//:all",
        "@remote_jdk8_macos_toolchain_config_repo//:all",
        "@remote_jdk8_macos_aarch64_toolchain_config_repo//:all",
        "@remote_jdk8_windows_toolchain_config_repo//:all",
        "@remotejdk11_linux_toolchain_config_repo//:all",
        "@remotejdk11_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk11_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk11_macos_toolchain_config_repo//:all",
        "@remotejdk11_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_win_toolchain_config_repo//:all",
        "@remotejdk11_win_arm64_toolchain_config_repo//:all",
        "@remotejdk17_linux_toolchain_config_repo//:all",
        "@remotejdk17_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk17_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk17_macos_toolchain_config_repo//:all",
        "@remotejdk17_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_win_toolchain_config_repo//:all",
        "@remotejdk17_win_arm64_toolchain_config_repo//:all",
        "@remotejdk21_linux_toolchain_config_repo//:all",
        "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk21_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk21_macos_toolchain_config_repo//:all",
        "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_win_toolchain_config_repo//:all",
        "@remotejdk21_win_arm64_toolchain_config_repo//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "rules_java@8.6.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_java/8.6.1/MODULE.bazel",
            "line": 20,
            "column": 27
          },
          "imports": {
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64",
            "local_jdk": "local_jdk",
            "remote_jdk8_linux_toolchain_config_repo": "remote_jdk8_linux_toolchain_config_repo",
            "remote_jdk8_linux_aarch64_toolchain_config_repo": "remote_jdk8_linux_aarch64_toolchain_config_repo",
            "remote_jdk8_linux_s390x_toolchain_config_repo": "remote_jdk8_linux_s390x_toolchain_config_repo",
            "remote_jdk8_macos_toolchain_config_repo": "remote_jdk8_macos_toolchain_config_repo",
            "remote_jdk8_macos_aarch64_toolchain_config_repo": "remote_jdk8_macos_aarch64_toolchain_config_repo",
            "remote_jdk8_windows_toolchain_config_repo": "remote_jdk8_windows_toolchain_config_repo",
            "remotejdk11_linux_toolchain_config_repo": "remotejdk11_linux_toolchain_config_repo",
            "remotejdk11_linux_aarch64_toolchain_config_repo": "remotejdk11_linux_aarch64_toolchain_config_repo",
            "remotejdk11_linux_ppc64le_toolchain_config_repo": "remotejdk11_linux_ppc64le_toolchain_config_repo",
            "remotejdk11_linux_s390x_toolchain_config_repo": "remotejdk11_linux_s390x_toolchain_config_repo",
            "remotejdk11_macos_toolchain_config_repo": "remotejdk11_macos_toolchain_config_repo",
            "remotejdk11_macos_aarch64_toolchain_config_repo": "remotejdk11_macos_aarch64_toolchain_config_repo",
            "remotejdk11_win_toolchain_config_repo": "remotejdk11_win_toolchain_config_repo",
            "remotejdk11_win_arm64_toolchain_config_repo": "remotejdk11_win_arm64_toolchain_config_repo",
            "remotejdk17_linux_toolchain_config_repo": "remotejdk17_linux_toolchain_config_repo",
            "remotejdk17_linux_aarch64_toolchain_config_repo": "remotejdk17_linux_aarch64_toolchain_config_repo",
            "remotejdk17_linux_ppc64le_toolchain_config_repo": "remotejdk17_linux_ppc64le_toolchain_config_repo",
            "remotejdk17_linux_s390x_toolchain_config_repo": "remotejdk17_linux_s390x_toolchain_config_repo",
            "remotejdk17_macos_toolchain_config_repo": "remotejdk17_macos_toolchain_config_repo",
            "remotejdk17_macos_aarch64_toolchain_config_repo": "remotejdk17_macos_aarch64_toolchain_config_repo",
            "remotejdk17_win_toolchain_config_repo": "remotejdk17_win_toolchain_config_repo",
            "remotejdk17_win_arm64_toolchain_config_repo": "remotejdk17_win_arm64_toolchain_config_repo",
            "remotejdk21_linux_toolchain_config_repo": "remotejdk21_linux_toolchain_config_repo",
            "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
            "remotejdk21_linux_ppc64le_toolchain_config_repo": "remotejdk21_linux_ppc64le_toolchain_config_repo",
            "remotejdk21_linux_s390x_toolchain_config_repo": "remotejdk21_linux_s390x_toolchain_config_repo",
            "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
            "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo",
            "remotejdk21_win_arm64_toolchain_config_repo": "remotejdk21_win_arm64_toolchain_config_repo"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_java//java:rules_java_deps.bzl",
          "extensionName": "compatibility_proxy",
          "usingModule": "rules_java@8.6.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_java/8.6.1/MODULE.bazel",
            "line": 93,
            "column": 23
          },
          "imports": {
            "compatibility_proxy": "compatibility_proxy"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.11",
        "rules_cc": "rules_cc@0.1.1",
        "bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "com_google_protobuf": "protobuf@31.1",
        "rules_license": "rules_license@1.0.0",
        "com_google_absl": "abseil-cpp@20250512.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_java~8.6.1",
          "urls": [
            "https://github.com/bazelbuild/rules_java/releases/download/8.6.1/rules_java-8.6.1.tar.gz"
          ],
          "integrity": "sha256-xbwX4Xu2IpCx/Y/dhHojltNFnzN6fgfad2m4abSI7CY=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_jvm_external@6.7": {
      "name": "rules_jvm_external",
      "version": "6.7",
      "key": "rules_jvm_external@6.7",
      "repoName": "rules_jvm_external",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
          "extensionName": "remote_android_tools_extensions",
          "usingModule": "rules_jvm_external@6.7",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
            "line": 48,
            "column": 42
          },
          "imports": {
            "android_gmaven_r8": "android_gmaven_r8",
            "android_tools": "android_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": ":extensions.bzl",
          "extensionName": "maven",
          "usingModule": "rules_jvm_external@6.7",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
            "line": 51,
            "column": 22
          },
          "imports": {
            "rules_jvm_external_deps": "rules_jvm_external_deps",
            "unpinned_rules_jvm_external_deps": "unpinned_rules_jvm_external_deps"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "install",
              "attributeValues": {
                "name": "rules_jvm_external_deps",
                "artifacts": [
                  "com.google.auth:google-auth-library-credentials:1.23.0",
                  "com.google.auth:google-auth-library-oauth2-http:1.23.0",
                  "com.google.cloud:google-cloud-core:2.40.0",
                  "com.google.cloud:google-cloud-storage:2.40.1",
                  "com.google.code.gson:gson:2.11.0",
                  "com.google.googlejavaformat:google-java-format:1.22.0",
                  "com.google.guava:guava:33.2.1-jre",
                  "org.apache.maven:maven-artifact:3.9.8",
                  "org.apache.maven:maven-core:3.9.8",
                  "org.apache.maven:maven-model:3.9.8",
                  "org.apache.maven:maven-model-builder:3.9.8",
                  "org.apache.maven:maven-settings:3.9.8",
                  "org.apache.maven:maven-settings-builder:3.9.8",
                  "org.apache.maven:maven-resolver-provider:3.9.8",
                  "org.apache.maven.resolver:maven-resolver-api:1.9.20",
                  "org.apache.maven.resolver:maven-resolver-impl:1.9.20",
                  "org.apache.maven.resolver:maven-resolver-connector-basic:1.9.20",
                  "org.apache.maven.resolver:maven-resolver-spi:1.9.20",
                  "org.apache.maven.resolver:maven-resolver-transport-file:1.9.20",
                  "org.apache.maven.resolver:maven-resolver-transport-http:1.9.20",
                  "org.apache.maven.resolver:maven-resolver-util:1.9.20",
                  "org.codehaus.plexus:plexus-cipher:2.1.0",
                  "org.codehaus.plexus:plexus-sec-dispatcher:2.0",
                  "org.codehaus.plexus:plexus-utils:3.5.1",
                  "org.fusesource.jansi:jansi:2.4.1",
                  "org.slf4j:jul-to-slf4j:2.0.12",
                  "org.slf4j:log4j-over-slf4j:2.0.12",
                  "org.slf4j:slf4j-simple:2.0.12",
                  "software.amazon.awssdk:s3:2.26.12",
                  "org.bouncycastle:bcprov-jdk15on:1.68",
                  "org.bouncycastle:bcpg-jdk15on:1.68"
                ],
                "fail_if_repin_required": true,
                "fetch_sources": true,
                "lock_file": "//:rules_jvm_external_deps_install.json",
                "strict_visibility": true
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 59,
                "column": 14
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "//:MODULE.bazel",
          "extensionName": "_repo_rules",
          "usingModule": "rules_jvm_external@6.7",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
            "line": 0,
            "column": 0
          },
          "imports": {
            "coursier_cli": "coursier_cli",
            "buildifier-linux-arm64": "buildifier-linux-arm64",
            "buildifier-linux-x86_64": "buildifier-linux-x86_64",
            "buildifier-macos-arm64": "buildifier-macos-arm64",
            "buildifier-macos-x86_64": "buildifier-macos-x86_64",
            "com.google.ar.sceneform_rendering": "com.google.ar.sceneform_rendering",
            "hamcrest_core_for_test": "hamcrest_core_for_test",
            "hamcrest_core_srcs_for_test": "hamcrest_core_srcs_for_test",
            "gson_for_test": "gson_for_test",
            "junit_platform_commons_for_test": "junit_platform_commons_for_test",
            "google_api_services_compute_javadoc_for_test": "google_api_services_compute_javadoc_for_test",
            "lombok_for_test": "lombok_for_test"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "sha256": "8c724dc204534353ea8263ba0af624979658f7ab62395f35b04f03ce5714f330",
                "urls": [
                  "https://github.com/coursier/coursier/releases/download/v2.1.24/coursier.jar"
                ],
                "name": "coursier_cli"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 118,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "sha256": "c22a44eee37b8927167ee6ee67573303f4e31171e7ec3a8ea021a6a660040437",
                "urls": [
                  "https://github.com/bazelbuild/buildtools/releases/download/v7.1.2/buildifier-linux-arm64"
                ],
                "name": "buildifier-linux-arm64"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 124,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "sha256": "28285fe7e39ed23dc1a3a525dfcdccbc96c0034ff1d4277905d2672a71b38f13",
                "urls": [
                  "https://github.com/bazelbuild/buildtools/releases/download/v7.1.2/buildifier-linux-amd64"
                ],
                "name": "buildifier-linux-x86_64"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 130,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "sha256": "d0909b645496608fd6dfc67f95d9d3b01d90736d7b8c8ec41e802cb0b7ceae7c",
                "urls": [
                  "https://github.com/bazelbuild/buildtools/releases/download/v7.1.2/buildifier-darwin-arm64"
                ],
                "name": "buildifier-macos-arm64"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 136,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "sha256": "687c49c318fb655970cf716eed3c7bfc9caeea4f2931a2fd36593c458de0c537",
                "urls": [
                  "https://github.com/bazelbuild/buildtools/releases/download/v7.1.2/buildifier-darwin-amd64"
                ],
                "name": "buildifier-macos-x86_64"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 142,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "rendering-1.10.0.aar",
                "sha256": "d2f6cd1d54eee0d5557518d1edcf77a3ba37494ae94f9bb862e570ee426a3431",
                "urls": [
                  "https://dl.google.com/android/maven2/com/google/ar/sceneform/rendering/1.10.0/rendering-1.10.0.aar"
                ],
                "name": "com.google.ar.sceneform_rendering"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 841,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "hamcrest-core-1.3.jar",
                "sha256": "66fdef91e9739348df7a096aa384a5685f4e875584cce89386a7a47251c4d8e9",
                "urls": [
                  "https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
                ],
                "name": "hamcrest_core_for_test"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 850,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "hamcrest-core-1.3-sources.jar",
                "sha256": "e223d2d8fbafd66057a8848cc94222d63c3cedd652cc48eddc0ab5c39c0f84df",
                "urls": [
                  "https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3-sources.jar"
                ],
                "name": "hamcrest_core_srcs_for_test"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 859,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "gson-2.9.0.jar",
                "sha256": "c96d60551331a196dac54b745aa642cd078ef89b6f267146b705f2c2cbef052d",
                "urls": [
                  "https://repo1.maven.org/maven2/com/google/code/gson/gson/2.9.0/gson-2.9.0.jar"
                ],
                "name": "gson_for_test"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 868,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "junit-platform-commons-1.8.2.jar",
                "sha256": "d2e015fca7130e79af2f4608dc54415e4b10b592d77333decb4b1a274c185050",
                "urls": [
                  "https://repo1.maven.org/maven2/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar"
                ],
                "name": "junit_platform_commons_for_test"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 877,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "google-api-services-compute-v1-rev235-1.25.0-javadoc.jar",
                "sha256": "b03be5ee8effba3bfbaae53891a9c01d70e2e3bd82ad8889d78e641b22bd76c2",
                "urls": [
                  "https://repo1.maven.org/maven2/com/google/apis/google-api-services-compute/v1-rev235-1.25.0/google-api-services-compute-v1-rev235-1.25.0-javadoc.jar"
                ],
                "name": "google_api_services_compute_javadoc_for_test"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 887,
                "column": 10
              }
            },
            {
              "tagName": "@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
              "attributeValues": {
                "downloaded_file_path": "lombok-1.18.22.jar",
                "sha256": "ecef1581411d7a82cc04281667ee0bac5d7c0a5aae74cfc38430396c91c31831",
                "urls": [
                  "https://repo1.maven.org/maven2/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar"
                ],
                "name": "lombok_for_test"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/6.7/MODULE.bazel",
                "line": 896,
                "column": 10
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_android": "rules_android@0.1.1",
        "bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "rules_license": "rules_license@1.0.0",
        "rules_java": "rules_java@8.6.1",
        "rules_kotlin": "rules_kotlin@1.9.6",
        "rules_shell": "rules_shell@0.3.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_jvm_external~6.7",
          "urls": [
            "https://github.com/bazel-contrib/rules_jvm_external/releases/download/6.7/rules_jvm_external-6.7.tar.gz"
          ],
          "integrity": "sha256-oeNRYH8E/tKWujPEl30/4qYV7VDfeJZna2eqyZPFPBg=",
          "strip_prefix": "rules_jvm_external-6.7",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_kotlin@1.9.6": {
      "name": "rules_kotlin",
      "version": "1.9.6",
      "key": "rules_kotlin@1.9.6",
      "repoName": "rules_kotlin",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//kotlin/internal:default_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_kotlin//src/main/starlark/core/repositories:bzlmod_setup.bzl",
          "extensionName": "rules_kotlin_extensions",
          "usingModule": "rules_kotlin@1.9.6",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_kotlin/1.9.6/MODULE.bazel",
            "line": 14,
            "column": 40
          },
          "imports": {
            "com_github_google_ksp": "com_github_google_ksp",
            "com_github_jetbrains_kotlin": "com_github_jetbrains_kotlin",
            "com_github_pinterest_ktlint": "com_github_pinterest_ktlint",
            "rules_android": "rules_android"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
          "extensionName": "remote_android_tools_extensions",
          "usingModule": "rules_kotlin@1.9.6",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_kotlin/1.9.6/MODULE.bazel",
            "line": 29,
            "column": 42
          },
          "imports": {
            "android_gmaven_r8": "android_gmaven_r8",
            "android_tools": "android_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.11",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_java": "rules_java@8.6.1",
        "rules_python": "rules_python@1.0.0",
        "rules_cc": "rules_cc@0.1.1",
        "rules_proto": "rules_proto@7.0.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_kotlin~1.9.6",
          "urls": [
            "https://github.com/bazelbuild/rules_kotlin/releases/download/v1.9.6/rules_kotlin-v1.9.6.tar.gz"
          ],
          "integrity": "sha256-O3cpdv7Hvc2h2EudObF2WJQkwEfrIXW+0JqsYw5Qr0M=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_kotlin/1.9.6/patches/module_dot_bazel_version.patch": "sha256-DzcJ53CqDqD+AiboAl8Tq2/fKJRXn0g5O2g4UQfLrbE="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_pkg@1.0.1": {
      "name": "rules_pkg",
      "version": "1.0.1",
      "key": "rules_pkg@1.0.1",
      "repoName": "rules_pkg",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_license": "rules_license@1.0.0",
        "rules_python": "rules_python@1.0.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_pkg~1.0.1",
          "urls": [
            "https://github.com/bazelbuild/rules_pkg/releases/download/1.0.1/rules_pkg-1.0.1.tar.gz"
          ],
          "integrity": "sha256-0gyVGWDtd8t7NBwqWUiFNOSU1a0dMMSBjHNtV3cqn+8=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_python@1.0.0": {
      "name": "rules_python",
      "version": "1.0.0",
      "key": "rules_python@1.0.0",
      "repoName": "rules_python",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@pythons_hub//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_python//python/private:internal_deps.bzl",
          "extensionName": "internal_deps",
          "usingModule": "rules_python@1.0.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/1.0.0/MODULE.bazel",
            "line": 16,
            "column": 30
          },
          "imports": {
            "pypi__build": "pypi__build",
            "pypi__click": "pypi__click",
            "pypi__colorama": "pypi__colorama",
            "pypi__importlib_metadata": "pypi__importlib_metadata",
            "pypi__installer": "pypi__installer",
            "pypi__more_itertools": "pypi__more_itertools",
            "pypi__packaging": "pypi__packaging",
            "pypi__pep517": "pypi__pep517",
            "pypi__pip": "pypi__pip",
            "pypi__pip_tools": "pypi__pip_tools",
            "pypi__pyproject_hooks": "pypi__pyproject_hooks",
            "pypi__setuptools": "pypi__setuptools",
            "pypi__tomli": "pypi__tomli",
            "pypi__wheel": "pypi__wheel",
            "pypi__zipp": "pypi__zipp",
            "rules_python_internal": "rules_python_internal"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_python//python/extensions:python.bzl",
          "extensionName": "python",
          "usingModule": "rules_python@1.0.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/1.0.0/MODULE.bazel",
            "line": 39,
            "column": 23
          },
          "imports": {
            "python_3_11": "python_3_11",
            "python_versions": "python_versions",
            "pythons_hub": "pythons_hub"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "toolchain",
              "attributeValues": {
                "is_default": true,
                "python_version": "3.11"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_python/1.0.0/MODULE.bazel",
                "line": 45,
                "column": 17
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_python//python/extensions:pip.bzl",
          "extensionName": "pip",
          "usingModule": "rules_python@1.0.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/1.0.0/MODULE.bazel",
            "line": 57,
            "column": 20
          },
          "imports": {
            "rules_python_publish_deps": "rules_python_publish_deps"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "parse",
              "attributeValues": {
                "download_only": false,
                "experimental_index_url": "https://pypi.org/simple",
                "hub_name": "rules_python_publish_deps",
                "python_version": "3.11",
                "requirements_by_platform": {
                  "//tools/publish:requirements_darwin.txt": "osx_*",
                  "//tools/publish:requirements_linux.txt": "linux_*",
                  "//tools/publish:requirements_windows.txt": "windows_*"
                }
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_python/1.0.0/MODULE.bazel",
                "line": 58,
                "column": 10
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_cc": "rules_cc@0.1.1",
        "platforms": "platforms@0.0.11",
        "rules_proto": "rules_proto@7.0.2",
        "com_google_protobuf": "protobuf@31.1",
        "io_bazel_stardoc": "stardoc@0.7.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_python~1.0.0",
          "urls": [
            "https://github.com/bazelbuild/rules_python/releases/download/1.0.0/rules_python-1.0.0.tar.gz"
          ],
          "integrity": "sha256-T34qoeuapyLZZJj171FPQmwfVRYcPJrmKMhXpxKM6wc=",
          "strip_prefix": "rules_python-1.0.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_python/1.0.0/patches/module_dot_bazel_version.patch": "sha256-cbBUSuCYJv1403rbbGnELaqthj0ZtjWwXL+jYIrteps="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_shell@0.3.0": {
      "name": "rules_shell",
      "version": "0.3.0",
      "key": "rules_shell@0.3.0",
      "repoName": "rules_shell",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_shell//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_shell//shell/private/extensions:sh_configure.bzl",
          "extensionName": "sh_configure",
          "usingModule": "rules_shell@0.3.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_shell/0.3.0/MODULE.bazel",
            "line": 10,
            "column": 29
          },
          "imports": {
            "local_config_shell": "local_config_shell"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_shell~0.3.0",
          "urls": [
            "https://github.com/bazelbuild/rules_shell/releases/download/v0.3.0/rules_shell-v0.3.0.tar.gz"
          ],
          "integrity": "sha256-2M1KOpH8HcaNTH1rZV8J3vEJ9xhkN+P1Cptgq0NqDFM=",
          "strip_prefix": "rules_shell-0.3.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_shell/0.3.0/patches/module_dot_bazel_version.patch": "sha256-EmJAIbA/eRUtmeJTyvxoadXCXqGv5+NfMx2LAlAy+2Q="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "pybind11_bazel@2.12.0": {
      "name": "pybind11_bazel",
      "version": "2.12.0",
      "key": "pybind11_bazel@2.12.0",
      "repoName": "pybind11_bazel",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@pybind11_bazel//:internal_configure.bzl",
          "extensionName": "internal_configure_extension",
          "usingModule": "pybind11_bazel@2.12.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/pybind11_bazel/2.12.0/MODULE.bazel",
            "line": 12,
            "column": 35
          },
          "imports": {
            "pybind11": "pybind11"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.11",
        "rules_cc": "rules_cc@0.1.1",
        "rules_python": "rules_python@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "pybind11_bazel~2.12.0",
          "urls": [
            "https://github.com/pybind/pybind11_bazel/releases/download/v2.12.0/pybind11_bazel-2.12.0.zip"
          ],
          "integrity": "sha256-pYwlxf4GOnAFf6IMuOFfO9oZsQMDBby1M68eRfNqSlU=",
          "strip_prefix": "pybind11_bazel-2.12.0",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_proto@7.0.2": {
      "name": "rules_proto",
      "version": "7.0.2",
      "key": "rules_proto@7.0.2",
      "repoName": "rules_proto",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_google_protobuf": "protobuf@31.1",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_cc": "rules_cc@0.1.1",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_proto~7.0.2",
          "urls": [
            "https://github.com/bazelbuild/rules_proto/releases/download/7.0.2/rules_proto-7.0.2.tar.gz"
          ],
          "integrity": "sha256-DlxkolmabibGoD1hYiQtIx7MDeIZU0w4y0QCFx3vIeg=",
          "strip_prefix": "rules_proto-7.0.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_proto/7.0.2/patches/module_dot_bazel_version.patch": "sha256-kxckjuQWVpV7S42vfiX3heOtrOWXlhW/tAfaQFbgNjA="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_swift@2.1.1": {
      "name": "rules_swift",
      "version": "2.1.1",
      "key": "rules_swift@2.1.1",
      "repoName": "build_bazel_rules_swift",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@build_bazel_rules_swift//swift:extensions.bzl",
          "extensionName": "non_module_deps",
          "usingModule": "rules_swift@2.1.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_swift/2.1.1/MODULE.bazel",
            "line": 23,
            "column": 32
          },
          "imports": {
            "build_bazel_rules_swift_index_import": "build_bazel_rules_swift_index_import",
            "build_bazel_rules_swift_local_config": "build_bazel_rules_swift_local_config",
            "com_github_apple_swift_docc_symbolkit": "com_github_apple_swift_docc_symbolkit",
            "com_github_apple_swift_log": "com_github_apple_swift_log",
            "com_github_apple_swift_nio": "com_github_apple_swift_nio",
            "com_github_apple_swift_nio_extras": "com_github_apple_swift_nio_extras",
            "com_github_apple_swift_nio_http2": "com_github_apple_swift_nio_http2",
            "com_github_apple_swift_nio_transport_services": "com_github_apple_swift_nio_transport_services",
            "com_github_apple_swift_protobuf": "com_github_apple_swift_protobuf",
            "com_github_grpc_grpc_swift": "com_github_grpc_grpc_swift"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
          "extensionName": "apple_cc_configure_extension",
          "usingModule": "rules_swift@2.1.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_swift/2.1.1/MODULE.bazel",
            "line": 38,
            "column": 35
          },
          "imports": {
            "local_config_apple_cc": "local_config_apple_cc"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.23.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "build_bazel_apple_support": "apple_support@1.15.1",
        "rules_cc": "rules_cc@0.1.1",
        "platforms": "platforms@0.0.11",
        "com_google_protobuf": "protobuf@31.1",
        "rules_proto": "rules_proto@7.0.2",
        "com_github_nlohmann_json": "nlohmann_json@3.6.1",
        "com_github_apple_swift_argument_parser": "swift_argument_parser@1.3.1.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_swift~2.1.1",
          "urls": [
            "https://github.com/bazelbuild/rules_swift/releases/download/2.1.1/rules_swift.2.1.1.tar.gz"
          ],
          "integrity": "sha256-mRntHY2uUJZFv9OAU3rmUBUo2N6XHK6+1tUYW5lw3E0=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_swift/2.1.1/patches/module_dot_bazel_version.patch": "sha256-/kZbNxPjPQxNaVxijhzrPhwIf8mGwidxih95QYLXSo4="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_android@0.1.1": {
      "name": "rules_android",
      "version": "0.1.1",
      "key": "rules_android@0.1.1",
      "repoName": "rules_android",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_android~0.1.1",
          "urls": [
            "https://github.com/bazelbuild/rules_android/archive/refs/tags/v0.1.1.tar.gz"
          ],
          "integrity": "sha256-ZGHBxXREQrOU9GZFlX1r00IOsbQhkI/mPKoDCRsbNlU=",
          "strip_prefix": "rules_android-0.1.1",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_android/0.1.1/patches/module_dot_bazel.patch": "sha256-X/ORvZyYKdY8sYMMPZpolwCWsC1Xj93OmYUkLGATpHU="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "stardoc@0.7.2": {
      "name": "stardoc",
      "version": "0.7.2",
      "key": "stardoc@0.7.2",
      "repoName": "stardoc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_jvm_external//:extensions.bzl",
          "extensionName": "maven",
          "usingModule": "stardoc@0.7.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/stardoc/0.7.2/MODULE.bazel",
            "line": 23,
            "column": 22
          },
          "imports": {
            "stardoc_maven": "stardoc_maven"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "install",
              "attributeValues": {
                "name": "stardoc_maven",
                "artifacts": [
                  "com.beust:jcommander:1.82",
                  "com.google.escapevelocity:escapevelocity:1.1",
                  "com.google.guava:guava:31.1-jre",
                  "com.google.truth:truth:1.1.3",
                  "junit:junit:4.13.2"
                ],
                "fail_if_repin_required": true,
                "lock_file": "//:maven_install.json",
                "repositories": [
                  "https://repo1.maven.org/maven2"
                ],
                "strict_visibility": true
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/stardoc/0.7.2/MODULE.bazel",
                "line": 24,
                "column": 14
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "com_google_protobuf": "protobuf@31.1",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_java": "rules_java@8.6.1",
        "rules_jvm_external": "rules_jvm_external@6.7",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "stardoc~0.7.2",
          "urls": [
            "https://github.com/bazelbuild/stardoc/releases/download/0.7.2/stardoc-0.7.2.tar.gz"
          ],
          "integrity": "sha256-Dh7UqY8m5xh3a9ZNBT0CuzTZhXLM0D1ro1URKhIFcGs=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "nlohmann_json@3.6.1": {
      "name": "nlohmann_json",
      "version": "3.6.1",
      "key": "nlohmann_json@3.6.1",
      "repoName": "nlohmann_json",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "nlohmann_json~3.6.1",
          "urls": [
            "https://github.com/nlohmann/json/releases/download/v3.6.1/include.zip"
          ],
          "integrity": "sha256-acyIIHzpE0fqUwsif/B3bbgty43mcE4aPXT0hBvGUc8=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/nlohmann_json/3.6.1/patches/add_build_file.patch": "sha256-q7pmw7dn3H7Le3BgkydhrvZG+1e75JisnM+PLaPjCI0=",
            "https://bcr.bazel.build/modules/nlohmann_json/3.6.1/patches/module_dot_bazel.patch": "sha256-91o2FwT6kCVE+BBM+L2rxXFYbVDeDSkKHabs50GBa5o="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "swift_argument_parser@1.3.1.1": {
      "name": "swift_argument_parser",
      "version": "1.3.1.1",
      "key": "swift_argument_parser@1.3.1.1",
      "repoName": "swift_argument_parser",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "build_bazel_apple_support": "apple_support@1.15.1",
        "rules_swift": "rules_swift@2.1.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "swift_argument_parser~1.3.1.1",
          "urls": [
            "https://github.com/apple/swift-argument-parser/archive/refs/tags/1.3.1.tar.gz"
          ],
          "integrity": "sha256-TZZPh0slGrwoDuKPDxh948E6YSKpVhUk9moQdoyi2Dc=",
          "strip_prefix": "swift-argument-parser-1.3.1",
          "remote_patches": {
            "https://bcr.bazel.build/modules/swift_argument_parser/1.3.1.1/patches/add_build_file.patch": "sha256-HAgMs4nrp0xoaNjEud7N2ElL7mQ5zvAmuHyvESQF86E=",
            "https://bcr.bazel.build/modules/swift_argument_parser/1.3.1.1/patches/module_dot_bazel.patch": "sha256-p3SYXBmc729dSypjRCoq7TE243HB9p53/rvHImnvVXo="
          },
          "remote_patch_strip": 0
        }
      }
    }
  },
  "moduleExtensions": {
    "//:MODULE.bazel%_repo_rules": {
      "general": {
        "bzlTransitiveDigest": "5N51b9xEpf2bMJAN5rd4XedkyF3mkBazoyfbR0iSAoA=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "com_google_quic_trace": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "sha256": "ba01a041ae37b423fb8d555c53e545dcc914ad1a9a03832f266c0107d4433b08",
              "strip_prefix": "quic-trace-ed3deb8a056b260c59f2fd42af6dfa3db48a8cad",
              "urls": [
                "https://github.com/google/quic-trace/archive/ed3deb8a056b260c59f2fd42af6dfa3db48a8cad.tar.gz"
              ],
              "name": "_main~_repo_rules~com_google_quic_trace"
            }
          },
          "com_google_googleurl": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "sha256": "1d2c507cc31e109ecb41ba1fe766f5ff0f5974c3ba8d0919b3d22668f7e89305",
              "urls": [
                "https://storage.googleapis.com/quiche-envoy-integration/googleurl-5573f9aa120f3fbd378ca1b2565bbf7d223cd542.tar.gz"
              ],
              "name": "_main~_repo_rules~com_google_googleurl"
            }
          }
        }
      }
    },
    "@@apple_support~1.15.1//crosstool:setup.bzl%apple_cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "RyR+EbN4fAzxxZSQKwXXrxEtMVrezn79MOR/2mmcmYk=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_apple_cc": {
            "bzlFile": "@@apple_support~1.15.1//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf",
            "attributes": {
              "name": "apple_support~1.15.1~apple_cc_configure_extension~local_config_apple_cc"
            }
          },
          "local_config_apple_cc_toolchains": {
            "bzlFile": "@@apple_support~1.15.1//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf_toolchains",
            "attributes": {
              "name": "apple_support~1.15.1~apple_cc_configure_extension~local_config_apple_cc_toolchains"
            }
          }
        }
      }
    },
    "@@bazel_features~1.23.0//private:extensions.bzl%version_extension": {
      "general": {
        "bzlTransitiveDigest": "WJ9BtOJ0Z0G1M5B79s1y8kP8/A3puDjgOoLSIE41JTI=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "bazel_features_version": {
            "bzlFile": "@@bazel_features~1.23.0//private:version_repo.bzl",
            "ruleClassName": "version_repo",
            "attributes": {
              "name": "bazel_features~1.23.0~version_extension~bazel_features_version"
            }
          },
          "bazel_features_globals": {
            "bzlFile": "@@bazel_features~1.23.0//private:globals_repo.bzl",
            "ruleClassName": "globals_repo",
            "attributes": {
              "name": "bazel_features~1.23.0~version_extension~bazel_features_globals",
              "globals": {
                "CcSharedLibraryInfo": "6.0.0-pre.20220630.1",
                "CcSharedLibraryHintInfo": "7.0.0-pre.20230316.2",
                "macro": "8.0.0",
                "PackageSpecificationInfo": "6.4.0",
                "RunEnvironmentInfo": "5.3.0",
                "subrule": "7.0.0",
                "DefaultInfo": "0.0.1",
                "__TestingOnly_NeverAvailable": "1000000000.0.0"
              },
              "legacy_globals": {
                "JavaInfo": "8.0.0",
                "JavaPluginInfo": "8.0.0",
                "ProtoInfo": "8.0.0",
                "PyCcLinkParamsProvider": "8.0.0",
                "PyInfo": "8.0.0",
                "PyRuntimeInfo": "8.0.0",
                "cc_proto_aspect": "8.0.0"
              }
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "DEV"
        }
      }
    },
    "@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "O9sf6ilKWU9Veed02jG9o2HM/xgV/UAyciuFBuxrFRY=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        }
      }
    },
    "@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_xcode": {
            "bzlFile": "@@bazel_tools//tools/osx:xcode_configure.bzl",
            "ruleClassName": "xcode_autoconf",
            "attributes": {
              "name": "bazel_tools~xcode_configure_extension~local_config_xcode",
              "xcode_locator": "@bazel_tools//tools/osx:xcode_locator.m",
              "remote_xcode": ""
            }
          }
        }
      }
    },
    "@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_sh": {
            "bzlFile": "@@bazel_tools//tools/sh:sh_configure.bzl",
            "ruleClassName": "sh_config",
            "attributes": {
              "name": "bazel_tools~sh_configure_extension~local_config_sh"
            }
          }
        }
      }
    },
    "@@platforms//host:extension.bzl%host_platform": {
      "general": {
        "bzlTransitiveDigest": "V/6tpbc8Kd+rXTEYg8ra/p0s4Qi0bh64yzYL8Fz1NRQ=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "host_platform": {
            "bzlFile": "@@platforms//host:extension.bzl",
            "ruleClassName": "host_platform_repo",
            "attributes": {
              "name": "platforms~host_platform~host_platform"
            }
          }
        }
      }
    },
    "@@rules_android_ndk~0.1.2//:extension.bzl%android_ndk_repository_extension": {
      "general": {
        "bzlTransitiveDigest": "oV/TPZWCXAAcpJG/DBV/lNiWCISUTk5ba0KRjUb7adg=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "androidndk": {
            "bzlFile": "@@rules_android_ndk~0.1.2//:rules.bzl",
            "ruleClassName": "android_ndk_repository",
            "attributes": {
              "name": "rules_android_ndk~0.1.2~android_ndk_repository_extension~androidndk"
            }
          }
        }
      }
    },
    "@@rules_cc~0.1.1//cc:extensions.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "SB4pRQNTJdvn2m1hq8+OmuFD1MzfbQVkRah5UVN/T2A=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@rules_cc~0.1.1//cc/private/toolchain:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "rules_cc~0.1.1~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@rules_cc~0.1.1//cc/private/toolchain:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "rules_cc~0.1.1~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        }
      }
    },
    "@@rules_java~8.6.1//java:extensions.bzl%toolchains": {
      "general": {
        "bzlTransitiveDigest": "mU5gVU0csltka9noyCM3sA19stcQ3FXCr65tmohxdfs=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "remotejdk17_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\n"
            }
          },
          "remote_java_tools_windows": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_java_tools_windows",
              "sha256": "f5de3f2afc49d1a457efa63926bcc0ca4cdb5fc4887160bf9163e49f059dd12c",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.13/java_tools_windows-v13.13.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.13/java_tools_windows-v13.13.zip"
              ]
            }
          },
          "remotejdk11_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "c208cd0fb90560644a90f928667d2f53bfe408c957a5e36206585ad874427761",
              "strip_prefix": "jdk-21.0.4+7",
              "urls": [
                "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4+7/OpenJDK21U-jdk_ppc64le_linux_hotspot_21.0.4_7.tar.gz",
                "https://mirror.bazel.build/github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4+7/OpenJDK21U-jdk_ppc64le_linux_hotspot_21.0.4_7.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "be7d7574253c893eb58f66e985c75adf48558c41885827d1f02f827e109530e0",
              "strip_prefix": "zulu11.72.19-ca-jdk11.0.23-linux_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-linux_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "a1e8ac9ae5804b84dc07cf9d8ebe1b18247d70c92c1e0de97ea10109563f4379",
              "strip_prefix": "zulu17.50.19-ca-jdk17.0.11-linux_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_macos",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "b384991e93af39abe5229c7f5efbe912a7c5a6480674a6e773f3a9128f96a764",
              "strip_prefix": "zulu17.50.19-ca-jdk17.0.11-macosx_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_win",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "43f0f1bdecf48ba9763d46ee7784554c95b442ffdd39ebd62dc8b297cc82e116",
              "strip_prefix": "zulu17.50.19-ca-jdk17.0.11-win_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_x64.zip",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_x64.zip"
              ]
            }
          },
          "remote_jdk8_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_8\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"8\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remote_jdk8_windows": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_windows",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n",
              "sha256": "ca5499c301d5b42604d8535b8c40a7f928a796247b8c66a600333dd799798ff7",
              "strip_prefix": "zulu8.78.0.19-ca-jdk8.0.412-win_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-win_x64.zip",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-win_x64.zip"
              ]
            }
          },
          "remote_jdk8_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n",
              "sha256": "35bc35808379400e4a70e1f7ee379778881799b93c2cc9fe1ae515c03c2fb057",
              "strip_prefix": "zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remote_jdk8_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_linux_s390x",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n",
              "sha256": "276a431c79b7e94bc1b1b4fd88523383ae2d635ea67114dfc8a6174267f8fb2c",
              "strip_prefix": "jdk8u292-b10",
              "urls": [
                "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_s390x_linux_hotspot_8u292b10.tar.gz",
                "https://mirror.bazel.build/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_s390x_linux_hotspot_8u292b10.tar.gz"
              ]
            }
          },
          "remotejdk17_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "0a4d1bfc7a96a7f9f5329b72b9801b3c53366417b4753f1b658fa240204c7347",
              "strip_prefix": "zulu11.72.19-ca-jdk11.0.23-linux_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-linux_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_win_arm64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "b8833d272eb31f54f8c881139807a28a74de9deae07d2cc37688ff72043e32c9",
              "strip_prefix": "zulu17.50.19-ca-jdk17.0.11-win_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_aarch64.zip",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_aarch64.zip"
              ]
            }
          },
          "remotejdk17_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1+1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1+1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk21_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win_arm64//:jdk\",\n)\n"
            }
          },
          "remote_jdk8_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_macos",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n",
              "sha256": "2bfa0506196962bddb21a604eaa2b0b39eaf3383d0bdad08bdbe7f42f25d8928",
              "strip_prefix": "zulu8.78.0.19-ca-jdk8.0.412-macosx_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-macosx_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_s390x//:jdk\",\n)\n"
            }
          },
          "local_jdk": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:local_java_repository.bzl",
            "ruleClassName": "_local_java_repository_rule",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~local_jdk",
              "runtime_name": "local_jdk",
              "java_home": "",
              "version": "",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n"
            }
          },
          "remote_java_tools_darwin_x86_64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_java_tools_darwin_x86_64",
              "sha256": "d002ff57bd5e36d6d69a1c282fa571841816a1ccc5d28060cf7fe4c7257e376a",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.13/java_tools_darwin_x86_64-v13.13.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.13/java_tools_darwin_x86_64-v13.13.zip"
              ]
            }
          },
          "remote_jdk8_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_8\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"8\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remote_java_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_java_tools",
              "sha256": "df895d5067f2dad4524109ebfddac442d2514d0e2f95f6abc098cfae98b9bbb5",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.13/java_tools-v13.13.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.13/java_tools-v13.13.zip"
              ],
              "build_file": "@@rules_java~8.6.1//toolchains:BUILD.java_tools"
            }
          },
          "remotejdk17_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\n"
            }
          },
          "remote_jdk8_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_8\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"8\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "bc2750f81a166cc6e9c30ae8aaba54f253a8c8ec9d8cfc04a555fe20712c7bff",
              "strip_prefix": "zulu21.36.17-ca-jdk21.0.4-macosx_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-macosx_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remote_jdk8_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_8\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"8\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "dd1a82d57e80cdefb045066e5c28b5bd41e57eea9c57303ec7e012b57230bb9c",
              "strip_prefix": "zulu17.50.19-ca-jdk17.0.11-macosx_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remote_jdk8_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_8\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"8\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_win",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "1295b2affe498018c45f6f15187b58c4456d51dce5eb608ee73ef7665d4566d2",
              "strip_prefix": "zulu11.72.19-ca-jdk11.0.23-win_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-win_x64.zip",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-win_x64.zip"
              ]
            }
          },
          "remote_jdk8_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_linux",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n",
              "sha256": "9c0ac5ebffa61520fee78ead52add0f4edd3b1b54b01b6a17429b719515caf90",
              "strip_prefix": "zulu8.78.0.19-ca-jdk8.0.412-linux_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-linux_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk11_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_macos",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "e5b19b82045826ae09c9d17742691bc9e40312c44be7bd7598ae418a3d4edb1c",
              "strip_prefix": "zulu11.72.19-ca-jdk11.0.23-macosx_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-macosx_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_win_arm64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2",
              "strip_prefix": "jdk-11.0.13+8",
              "urls": [
                "https://aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip",
                "https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"
              ]
            }
          },
          "remotejdk21_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_macos",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "5ce75a6a247c7029b74c4ca7cf6f60fd2b2d68ce1e8956fb448d2984316b5fea",
              "strip_prefix": "zulu21.36.17-ca-jdk21.0.4-macosx_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-macosx_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk17_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remote_jdk8_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 8,\n)\n",
              "sha256": "82c46c65d57e187ef68fdd125ef760eaeb52ebfe1be1a6a251cf5b43cbebc78a",
              "strip_prefix": "zulu8.78.0.19-ca-jdk8.0.412-linux_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-linux_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "318d0c2ed3c876fb7ea2c952945cdcf7decfb5264ca51aece159e635ac53d544",
              "strip_prefix": "zulu21.36.17-ca-jdk21.0.4-linux_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-linux_x64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-linux_x64.tar.gz"
              ]
            }
          },
          "remote_java_tools_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_java_tools_linux",
              "sha256": "60c10e91f5900801423f9c5b020cc0c7da16dbaeee9c22891b38e7017306a8e7",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.13/java_tools_linux-v13.13.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.13/java_tools_linux-v13.13.zip"
              ]
            }
          },
          "remotejdk21_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_win",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "d771dad10d3f0b440c3686d1f3d2b68b320802ac97b212d87671af3f2eef8848",
              "strip_prefix": "zulu21.36.17-ca-jdk21.0.4-win_x64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-win_x64.zip",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-win_x64.zip"
              ]
            }
          },
          "remotejdk21_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "da3c2d7db33670bcf66532441aeb7f33dcf0d227c8dafe7ce35cee67f6829c4c",
              "strip_prefix": "zulu21.36.17-ca-jdk21.0.4-linux_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-linux_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_s390x",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz",
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "518cc455c0c7b49c0ae7d809c0bb87ab371bb850d46abb8efad5010c6a06faec",
              "strip_prefix": "zulu17.50.19-ca-jdk17.0.11-linux_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk21_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_win_arm64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "9f873eccf030b1d3dc879ec1eb0ff5e11bf76002dc81c5c644c3462bf6c5146b",
              "strip_prefix": "zulu21.36.17-ca-jdk21.0.4-win_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-win_aarch64.zip",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.36.17-ca-jdk21.0.4-win_aarch64.zip"
              ]
            }
          },
          "remotejdk21_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_s390x",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "c900c8d64fab1e53274974fa4a4c736a5a3754485a5c56f4947281480773658a",
              "strip_prefix": "jdk-21.0.4+7",
              "urls": [
                "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4+7/OpenJDK21U-jdk_s390x_linux_hotspot_21.0.4_7.tar.gz",
                "https://mirror.bazel.build/github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4+7/OpenJDK21U-jdk_s390x_linux_hotspot_21.0.4_7.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remote_java_tools_darwin_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_java_tools_darwin_arm64",
              "sha256": "6d4b4e3a12cc5fd9f600b383465d0860afd5c11ba7c7386867bb621a55fa8452",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.13/java_tools_darwin_arm64-v13.13.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.13/java_tools_darwin_arm64-v13.13.zip"
              ]
            }
          },
          "remotejdk21_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\n"
            }
          },
          "remote_jdk8_windows_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remote_jdk8_windows_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_8\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"8\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_windows//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remote_jdk8_windows//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk17_linux_s390x",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1+1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1+1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "40fb1918385e03814b67b7608c908c7f945ccbeddbbf5ed062cdfb2602e21c83",
              "strip_prefix": "zulu11.72.19-ca-jdk11.0.23-macosx_aarch64",
              "urls": [
                "https://cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-macosx_aarch64.tar.gz",
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.72.19-ca-jdk11.0.23-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk11_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java/toolchains:java_runtime.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n\nfilegroup(\n    name = \"jdk-jmods\",\n    srcs = glob(\n        [\"jmods/**\"],\n        allow_empty = True,\n    ),\n)\n\njava_runtime(\n    name = \"jdk-with-jmods\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jdk-jmods\",\n        \":jre\",\n    ],\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk21_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~8.6.1//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~8.6.1~toolchains~remotejdk21_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\n"
            }
          }
        }
      }
    },
    "@@rules_java~8.6.1//java:rules_java_deps.bzl%compatibility_proxy": {
      "general": {
        "bzlTransitiveDigest": "5SWxXKpZlGSt+tVJQuDR4qZ70b9oFJt6PpSaaWHJGb0=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "compatibility_proxy": {
            "bzlFile": "@@rules_java~8.6.1//java:rules_java_deps.bzl",
            "ruleClassName": "_compatibility_proxy_repo_rule",
            "attributes": {
              "name": "rules_java~8.6.1~compatibility_proxy~compatibility_proxy"
            }
          }
        }
      }
    },
    "@@rules_kotlin~1.9.6//src/main/starlark/core/repositories:bzlmod_setup.bzl%rules_kotlin_extensions": {
      "general": {
        "bzlTransitiveDigest": "n/WSS9Wuf6O9uJeYf4X0jb+RES6XAZSpmL8d2qDw46k=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "rules_android": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_kotlin~1.9.6~rules_kotlin_extensions~rules_android",
              "sha256": "cd06d15dd8bb59926e4d65f9003bfc20f9da4b2519985c27e190cddc8b7a7806",
              "strip_prefix": "rules_android-0.1.1",
              "urls": [
                "https://github.com/bazelbuild/rules_android/archive/v0.1.1.zip"
              ]
            }
          },
          "com_github_pinterest_ktlint": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_file",
            "attributes": {
              "name": "rules_kotlin~1.9.6~rules_kotlin_extensions~com_github_pinterest_ktlint",
              "sha256": "01b2e0ef893383a50dbeb13970fe7fa3be36ca3e83259e01649945b09d736985",
              "urls": [
                "https://github.com/pinterest/ktlint/releases/download/1.3.0/ktlint"
              ],
              "executable": true
            }
          },
          "com_github_jetbrains_kotlin": {
            "bzlFile": "@@rules_kotlin~1.9.6//src/main/starlark/core/repositories:compiler.bzl",
            "ruleClassName": "kotlin_capabilities_repository",
            "attributes": {
              "name": "rules_kotlin~1.9.6~rules_kotlin_extensions~com_github_jetbrains_kotlin",
              "git_repository_name": "com_github_jetbrains_kotlin_git",
              "compiler_version": "1.9.23"
            }
          },
          "com_github_jetbrains_kotlin_git": {
            "bzlFile": "@@rules_kotlin~1.9.6//src/main/starlark/core/repositories:compiler.bzl",
            "ruleClassName": "kotlin_compiler_git_repository",
            "attributes": {
              "name": "rules_kotlin~1.9.6~rules_kotlin_extensions~com_github_jetbrains_kotlin_git",
              "urls": [
                "https://github.com/JetBrains/kotlin/releases/download/v1.9.23/kotlin-compiler-1.9.23.zip"
              ],
              "sha256": "93137d3aab9afa9b27cb06a824c2324195c6b6f6179d8a8653f440f5bd58be88"
            }
          },
          "com_github_google_ksp": {
            "bzlFile": "@@rules_kotlin~1.9.6//src/main/starlark/core/repositories:ksp.bzl",
            "ruleClassName": "ksp_compiler_plugin_repository",
            "attributes": {
              "name": "rules_kotlin~1.9.6~rules_kotlin_extensions~com_github_google_ksp",
              "urls": [
                "https://github.com/google/ksp/releases/download/1.9.23-1.0.20/artifacts.zip"
              ],
              "sha256": "ee0618755913ef7fd6511288a232e8fad24838b9af6ea73972a76e81053c8c2d",
              "strip_version": "1.9.23-1.0.20"
            }
          }
        }
      }
    },
    "@@rules_python~1.0.0//python/extensions:python.bzl%python": {
      "general": {
        "bzlTransitiveDigest": "u907oeWMnz0u66DIk611whs2NOYp0fvgjj2fTX869xs=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "python_3_11_s390x-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_s390x-unknown-linux-gnu",
              "sha256": "6d584317651c1ad4a857cb32d1999707e8bb3046fcb2f156d80381814fa19fde",
              "patches": [],
              "patch_strip": 1,
              "platform": "s390x-unknown-linux-gnu",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-s390x-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-s390x-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_aarch64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_aarch64-apple-darwin",
              "sha256": "f64776f455a44c24d50f947c813738cfb7b9ac43732c44891bc831fa7940a33c",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-apple-darwin",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-aarch64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-aarch64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_x86_64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_x86_64-apple-darwin",
              "sha256": "90b46dfb1abd98d45663c7a2a8c45d3047a59391d8586d71b459cec7b75f662b",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-apple-darwin",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-x86_64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-x86_64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_aarch64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_aarch64-unknown-linux-gnu",
              "sha256": "803e49259280af0f5466d32829cd9d65a302b0226e424b3f0b261f9daf6aee8f",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-unknown-linux-gnu",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_ppc64le-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_ppc64le-unknown-linux-gnu",
              "sha256": "0c45af4e7525e2db59901606db32b2896ac1e9830c6f95551402207f537c2ce4",
              "patches": [],
              "patch_strip": 1,
              "platform": "ppc64le-unknown-linux-gnu",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_x86_64-pc-windows-msvc": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_x86_64-pc-windows-msvc",
              "sha256": "e48952619796c66ec9719867b87be97edca791c2ef7fbf87d42c417c3331609e",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-pc-windows-msvc",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "pythons_hub": {
            "bzlFile": "@@rules_python~1.0.0//python/private:pythons_hub.bzl",
            "ruleClassName": "hub_repo",
            "attributes": {
              "name": "rules_python~1.0.0~python~pythons_hub",
              "default_python_version": "3.11",
              "minor_mapping": {
                "3.8": "3.8.20",
                "3.9": "3.9.20",
                "3.10": "3.10.15",
                "3.11": "3.11.10",
                "3.12": "3.12.7",
                "3.13": "3.13.0"
              },
              "python_versions": [
                "3.8.10",
                "3.8.12",
                "3.8.13",
                "3.8.15",
                "3.8.16",
                "3.8.17",
                "3.8.18",
                "3.8.19",
                "3.8.20",
                "3.9.10",
                "3.9.12",
                "3.9.13",
                "3.9.15",
                "3.9.16",
                "3.9.17",
                "3.9.18",
                "3.9.19",
                "3.9.20",
                "3.10.2",
                "3.10.4",
                "3.10.6",
                "3.10.8",
                "3.10.9",
                "3.10.11",
                "3.10.12",
                "3.10.13",
                "3.10.14",
                "3.10.15",
                "3.11.1",
                "3.11.3",
                "3.11.4",
                "3.11.5",
                "3.11.6",
                "3.11.7",
                "3.11.8",
                "3.11.9",
                "3.11.10",
                "3.12.0",
                "3.12.1",
                "3.12.2",
                "3.12.3",
                "3.12.4",
                "3.12.7",
                "3.13.0"
              ],
              "toolchain_prefixes": [
                "_0000_python_3_9_",
                "_0001_python_3_10_",
                "_0002_python_3_12_",
                "_0003_python_3_11_"
              ],
              "toolchain_python_versions": [
                "3.9.20",
                "3.10.15",
                "3.12.7",
                "3.11.10"
              ],
              "toolchain_set_python_version_constraints": [
                "True",
                "True",
                "True",
                "False"
              ],
              "toolchain_user_repository_names": [
                "python_3_9",
                "python_3_10",
                "python_3_12",
                "python_3_11"
              ],
              "loaded_platforms": {
                "3.9.20": [
                  "aarch64-apple-darwin",
                  "aarch64-unknown-linux-gnu",
                  "ppc64le-unknown-linux-gnu",
                  "s390x-unknown-linux-gnu",
                  "x86_64-apple-darwin",
                  "x86_64-pc-windows-msvc",
                  "x86_64-unknown-linux-gnu",
                  "x86_64-unknown-linux-musl"
                ],
                "3.10.15": [
                  "aarch64-apple-darwin",
                  "aarch64-unknown-linux-gnu",
                  "ppc64le-unknown-linux-gnu",
                  "s390x-unknown-linux-gnu",
                  "x86_64-apple-darwin",
                  "x86_64-pc-windows-msvc",
                  "x86_64-unknown-linux-gnu",
                  "x86_64-unknown-linux-musl"
                ],
                "3.12.7": [
                  "aarch64-apple-darwin",
                  "aarch64-unknown-linux-gnu",
                  "ppc64le-unknown-linux-gnu",
                  "s390x-unknown-linux-gnu",
                  "x86_64-apple-darwin",
                  "x86_64-pc-windows-msvc",
                  "x86_64-unknown-linux-gnu",
                  "x86_64-unknown-linux-musl"
                ],
                "3.11.10": [
                  "aarch64-apple-darwin",
                  "aarch64-unknown-linux-gnu",
                  "ppc64le-unknown-linux-gnu",
                  "s390x-unknown-linux-gnu",
                  "x86_64-apple-darwin",
                  "x86_64-pc-windows-msvc",
                  "x86_64-unknown-linux-gnu",
                  "x86_64-unknown-linux-musl"
                ]
              }
            }
          },
          "python_3_12_x86_64-pc-windows-msvc": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_x86_64-pc-windows-msvc",
              "sha256": "f05531bff16fa77b53be0776587b97b466070e768e6d5920894de988bdcd547a",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-pc-windows-msvc",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12_x86_64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_x86_64-unknown-linux-gnu",
              "sha256": "43576f7db1033dd57b900307f09c2e86f371152ac8a2607133afa51cbfc36064",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-gnu",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_x86_64-unknown-linux-musl": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_x86_64-unknown-linux-musl",
              "sha256": "d36fc77a8dd76155a7530f6235999a693b9e7c48aa11afeb5610a091cae5aa6f",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-musl",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-x86_64-unknown-linux-musl-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-x86_64-unknown-linux-musl-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_host": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "host_toolchain",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_host",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ],
              "python_version": "3.9.20"
            }
          },
          "python_3_12_aarch64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_aarch64-apple-darwin",
              "sha256": "4c18852bf9c1a11b56f21bcf0df1946f7e98ee43e9e4c0c5374b2b3765cf9508",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-apple-darwin",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-aarch64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-aarch64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_ppc64le-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_ppc64le-unknown-linux-gnu",
              "sha256": "9a24ccdbfc7f67545d859128f02a3150a160ea6c2fc134b0773bf56f2d90b397",
              "patches": [],
              "patch_strip": 1,
              "platform": "ppc64le-unknown-linux-gnu",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12_s390x-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_s390x-unknown-linux-gnu",
              "sha256": "935676a0c960b552f95e9ac2e1e385de5de4b34038ff65ffdc688838f1189c17",
              "patches": [],
              "patch_strip": 1,
              "platform": "s390x-unknown-linux-gnu",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-s390x-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-s390x-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_x86_64-unknown-linux-musl": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_x86_64-unknown-linux-musl",
              "sha256": "ed519c47d9620eb916a6f95ec2875396e7b1a9ab993ee40b2f31b837733f318c",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-musl",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-x86_64-unknown-linux-musl-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-x86_64-unknown-linux-musl-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12_aarch64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_aarch64-unknown-linux-gnu",
              "sha256": "bba3c6be6153f715f2941da34f3a6a69c2d0035c9c5396bc5bb68c6d2bd1065a",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-unknown-linux-gnu",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_ppc64le-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_ppc64le-unknown-linux-gnu",
              "sha256": "92b666d103902001322f42badbd68da92adc5cebb826af9c1c906c33166e2f34",
              "patches": [],
              "patch_strip": 1,
              "platform": "ppc64le-unknown-linux-gnu",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_x86_64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_x86_64-unknown-linux-gnu",
              "sha256": "c20ee831f7f46c58fa57919b75a40eb2b6a31e03fd29aaa4e8dab4b9c4b60d5d",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-gnu",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12_host": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "host_toolchain",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_host",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ],
              "python_version": "3.12.7"
            }
          },
          "python_3_9_s390x-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_s390x-unknown-linux-gnu",
              "sha256": "2cee381069bf344fb20eba609af92dfe7ba67eb75bea08eeccf11048a2c380c0",
              "patches": [],
              "patch_strip": 1,
              "platform": "s390x-unknown-linux-gnu",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-s390x-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-s390x-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_host": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "host_toolchain",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_host",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ],
              "python_version": "3.11.10"
            }
          },
          "python_3_9": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "toolchain_aliases",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9",
              "python_version": "3.9.20",
              "user_repository_name": "python_3_9",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ]
            }
          },
          "python_3_11_aarch64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_aarch64-apple-darwin",
              "sha256": "5a69382da99c4620690643517ca1f1f53772331b347e75f536088c42a4cf6620",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-apple-darwin",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-aarch64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-aarch64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_x86_64-pc-windows-msvc": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_x86_64-pc-windows-msvc",
              "sha256": "647b66ff4552e70aec3bf634dd470891b4a2b291e8e8715b3bdb162f577d4c55",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-pc-windows-msvc",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_aarch64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_aarch64-apple-darwin",
              "sha256": "34ab2bc4c51502145e1a624b4e4ea06877e3d1934a88cc73ac2e0fd5fd439b75",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-apple-darwin",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-aarch64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-aarch64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_x86_64-pc-windows-msvc": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_x86_64-pc-windows-msvc",
              "sha256": "5069008a237b90f6f7a86956903f2a0221b90d471daa6e4a94831eaa399e3993",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-pc-windows-msvc",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-x86_64-pc-windows-msvc-shared-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "toolchain_aliases",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12",
              "python_version": "3.12.7",
              "user_repository_name": "python_3_12",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ]
            }
          },
          "python_3_12_x86_64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_x86_64-apple-darwin",
              "sha256": "60c5271e7edc3c2ab47440b7abf4ed50fbc693880b474f74f05768f5b657045a",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-apple-darwin",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-x86_64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-x86_64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_aarch64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_aarch64-unknown-linux-gnu",
              "sha256": "1e486c054a4e86666cf24e04f5e29456324ba9c2b95bf1cae1805be90d3da154",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-unknown-linux-gnu",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_9_x86_64-unknown-linux-musl": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_x86_64-unknown-linux-musl",
              "sha256": "5c1cc348e317fe7af1acd6a7f665b46eccb554b20d6533f0e76c53f44d4556cc",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-musl",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-x86_64-unknown-linux-musl-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-x86_64-unknown-linux-musl-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_aarch64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_aarch64-unknown-linux-gnu",
              "sha256": "eb58581f85fde83d1f3e8e1f8c6f5a15c7ae4fdbe3b1d1083931f9167fdd8dbc",
              "patches": [],
              "patch_strip": 1,
              "platform": "aarch64-unknown-linux-gnu",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-aarch64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12_x86_64-unknown-linux-musl": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_x86_64-unknown-linux-musl",
              "sha256": "5ed4a4078db3cbac563af66403aaa156cd6e48831d90382a1820db2b120627b5",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-musl",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-x86_64-unknown-linux-musl-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-x86_64-unknown-linux-musl-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "toolchain_aliases",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11",
              "python_version": "3.11.10",
              "user_repository_name": "python_3_11",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ]
            }
          },
          "python_3_10_s390x-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_s390x-unknown-linux-gnu",
              "sha256": "de205896b070e6f5259ac0f2b3379eead875ea84e6a6ef533b89886fcbb46a4c",
              "patches": [],
              "patch_strip": 1,
              "platform": "s390x-unknown-linux-gnu",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-s390x-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-s390x-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "toolchain_aliases",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10",
              "python_version": "3.10.15",
              "user_repository_name": "python_3_10",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ]
            }
          },
          "python_3_11_x86_64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_x86_64-apple-darwin",
              "sha256": "1e23ffe5bc473e1323ab8f51464da62d77399afb423babf67f8e13c82b69c674",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-apple-darwin",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-x86_64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-x86_64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_versions": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "multi_toolchain_aliases",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_versions",
              "python_versions": {
                "3.9": "python_3_9",
                "3.10": "python_3_10",
                "3.12": "python_3_12",
                "3.11": "python_3_11"
              }
            }
          },
          "python_3_9_x86_64-apple-darwin": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_9_x86_64-apple-darwin",
              "sha256": "193dc7f0284e4917d52b17a077924474882ee172872f2257cfe3375d6d468ed9",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-apple-darwin",
              "python_version": "3.9.20",
              "release_filename": "20241016/cpython-3.9.20+20241016-x86_64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.9.20+20241016-x86_64-apple-darwin-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_x86_64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_x86_64-unknown-linux-gnu",
              "sha256": "3db2171e03c1a7acdc599fba583c1b92306d3788b375c9323077367af1e9d9de",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-gnu",
              "python_version": "3.10.15",
              "release_filename": "20241016/cpython-3.10.15+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.10.15+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_12_ppc64le-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_12_ppc64le-unknown-linux-gnu",
              "sha256": "0a1d1d92e33a969bd2f40a80af53c97b6c0cc1060d384ceff50ff801593bf9d6",
              "patches": [],
              "patch_strip": 1,
              "platform": "ppc64le-unknown-linux-gnu",
              "python_version": "3.12.7",
              "release_filename": "20241016/cpython-3.12.7+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.12.7+20241016-ppc64le-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_10_host": {
            "bzlFile": "@@rules_python~1.0.0//python/private:toolchains_repo.bzl",
            "ruleClassName": "host_toolchain",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_10_host",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu",
                "x86_64-unknown-linux-musl"
              ],
              "python_version": "3.10.15"
            }
          },
          "python_3_11_x86_64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~1.0.0//python/private:python_repository.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~1.0.0~python~python_3_11_x86_64-unknown-linux-gnu",
              "sha256": "8b50a442b04724a24c1eebb65a36a0c0e833d35374dbdf9c9470d8a97b164cd9",
              "patches": [],
              "patch_strip": 1,
              "platform": "x86_64-unknown-linux-gnu",
              "python_version": "3.11.10",
              "release_filename": "20241016/cpython-3.11.10+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20241016/cpython-3.11.10+20241016-x86_64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          }
        }
      }
    },
    "@@rules_python~1.0.0//python/private:internal_deps.bzl%internal_deps": {
      "general": {
        "bzlTransitiveDigest": "6mj+hGysmUfbmD51tlPhPb1VALHBnTMHtVgU7uFL5zk=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "pypi__wheel": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__wheel",
              "url": "https://files.pythonhosted.org/packages/7d/cd/d7460c9a869b16c3dd4e1e403cce337df165368c71d6af229a74699622ce/wheel-0.43.0-py3-none-any.whl",
              "sha256": "55c570405f142630c6b9f72fe09d9b67cf1477fcf543ae5b8dcb1f5b7377da81",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__click": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__click",
              "url": "https://files.pythonhosted.org/packages/00/2e/d53fa4befbf2cfa713304affc7ca780ce4fc1fd8710527771b58311a3229/click-8.1.7-py3-none-any.whl",
              "sha256": "ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__importlib_metadata": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__importlib_metadata",
              "url": "https://files.pythonhosted.org/packages/2d/0a/679461c511447ffaf176567d5c496d1de27cbe34a87df6677d7171b2fbd4/importlib_metadata-7.1.0-py3-none-any.whl",
              "sha256": "30962b96c0c223483ed6cc7280e7f0199feb01a0e40cfae4d4450fc6fab1f570",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pyproject_hooks": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__pyproject_hooks",
              "url": "https://files.pythonhosted.org/packages/ae/f3/431b9d5fe7d14af7a32340792ef43b8a714e7726f1d7b69cc4e8e7a3f1d7/pyproject_hooks-1.1.0-py3-none-any.whl",
              "sha256": "7ceeefe9aec63a1064c18d939bdc3adf2d8aa1988a510afec15151578b232aa2",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pep517": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__pep517",
              "url": "https://files.pythonhosted.org/packages/25/6e/ca4a5434eb0e502210f591b97537d322546e4833dcb4d470a48c375c5540/pep517-0.13.1-py3-none-any.whl",
              "sha256": "31b206f67165b3536dd577c5c3f1518e8fbaf38cbc57efff8369a392feff1721",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__packaging": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__packaging",
              "url": "https://files.pythonhosted.org/packages/49/df/1fceb2f8900f8639e278b056416d49134fb8d84c5942ffaa01ad34782422/packaging-24.0-py3-none-any.whl",
              "sha256": "2ddfb553fdf02fb784c234c7ba6ccc288296ceabec964ad2eae3777778130bc5",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pip_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__pip_tools",
              "url": "https://files.pythonhosted.org/packages/0d/dc/38f4ce065e92c66f058ea7a368a9c5de4e702272b479c0992059f7693941/pip_tools-7.4.1-py3-none-any.whl",
              "sha256": "4c690e5fbae2f21e87843e89c26191f0d9454f362d8acdbd695716493ec8b3a9",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__setuptools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__setuptools",
              "url": "https://files.pythonhosted.org/packages/de/88/70c5767a0e43eb4451c2200f07d042a4bcd7639276003a9c54a68cfcc1f8/setuptools-70.0.0-py3-none-any.whl",
              "sha256": "54faa7f2e8d2d11bcd2c07bed282eef1046b5c080d1c32add737d7b5817b1ad4",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__zipp": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__zipp",
              "url": "https://files.pythonhosted.org/packages/da/55/a03fd7240714916507e1fcf7ae355bd9d9ed2e6db492595f1a67f61681be/zipp-3.18.2-py3-none-any.whl",
              "sha256": "dce197b859eb796242b0622af1b8beb0a722d52aa2f57133ead08edd5bf5374e",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__colorama": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__colorama",
              "url": "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl",
              "sha256": "4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__build": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__build",
              "url": "https://files.pythonhosted.org/packages/e2/03/f3c8ba0a6b6e30d7d18c40faab90807c9bb5e9a1e3b2fe2008af624a9c97/build-1.2.1-py3-none-any.whl",
              "sha256": "75e10f767a433d9a86e50d83f418e83efc18ede923ee5ff7df93b6cb0306c5d4",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "rules_python_internal": {
            "bzlFile": "@@rules_python~1.0.0//python/private:internal_config_repo.bzl",
            "ruleClassName": "internal_config_repo",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~rules_python_internal"
            }
          },
          "pypi__pip": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__pip",
              "url": "https://files.pythonhosted.org/packages/8a/6a/19e9fe04fca059ccf770861c7d5721ab4c2aebc539889e97c7977528a53b/pip-24.0-py3-none-any.whl",
              "sha256": "ba0d021a166865d2265246961bec0152ff124de910c5cc39f1156ce3fa7c69dc",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__installer": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__installer",
              "url": "https://files.pythonhosted.org/packages/e5/ca/1172b6638d52f2d6caa2dd262ec4c811ba59eee96d54a7701930726bce18/installer-0.7.0-py3-none-any.whl",
              "sha256": "05d1933f0a5ba7d8d6296bb6d5018e7c94fa473ceb10cf198a92ccea19c27b53",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__more_itertools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__more_itertools",
              "url": "https://files.pythonhosted.org/packages/50/e2/8e10e465ee3987bb7c9ab69efb91d867d93959095f4807db102d07995d94/more_itertools-10.2.0-py3-none-any.whl",
              "sha256": "686b06abe565edfab151cb8fd385a05651e1fdf8f0a14191e4439283421f8684",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__tomli": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~1.0.0~internal_deps~pypi__tomli",
              "url": "https://files.pythonhosted.org/packages/97/75/10a9ebee3fd790d20926a90a2547f0bf78f371b2f13aa822c759680ca7b9/tomli-2.0.1-py3-none-any.whl",
              "sha256": "939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"@rules_python//python/private:glob_excludes.bzl\", \"glob_excludes\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude to avoid non-determinism.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ] + glob_excludes.version_dependent_exclusions()),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "DEV"
        }
      }
    },
    "@@rules_shell~0.3.0//shell/private/extensions:sh_configure.bzl%sh_configure": {
      "general": {
        "bzlTransitiveDigest": "Bl7sN7HU7HgULXfjumwHZu2pLGPdjRlwKH9JBKBQ7VA=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_shell": {
            "bzlFile": "@@rules_shell~0.3.0//shell/private/repositories:sh_config.bzl",
            "ruleClassName": "sh_config",
            "attributes": {
              "name": "rules_shell~0.3.0~sh_configure~local_config_shell"
            }
          }
        }
      }
    }
  }
}
